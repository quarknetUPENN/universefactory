/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include <string.h>
#include <stdbool.h>

#define CHECK_BIT(var,pos) (((var)>>(pos)) & 1)
#define WR 0
#define RD 1
#define CHIPID_ALL 0b111111

volatile unsigned int *comms = (volatile unsigned int *) 0x43c00000;
volatile unsigned int *tdc = (volatile unsigned int *) 0x43c10000;
volatile unsigned int *bram = (volatile unsigned int *) 0x80000000;
volatile unsigned int *fifo = (volatile unsigned int *) 0x43c20000;
volatile unsigned int *dips = (volatile unsigned int *) 0x43c20000;
volatile unsigned int *fifodata = (volatile unsigned int *) 0x83C00000;

typedef enum cmd {
    L1A 		= 0b1100000,
	SoftRst 	= 0b1010100,
	BXRst 		= 0b1010010,
	Reg 		= 0b1010111
} command;

typedef enum reg {
	Config = 0b00000, Status = 0b00011, Thresh1 = 0b01010, Thresh2 = 0b01100
} registers;

int cccd(enum cmd command, bool isRead, enum reg registers, int chipId, int payload){
	if (chipId > 0b111111){
		printf("Unrecognized chipId %u requested! Ignoring\n", chipId);
		return 1;
	}

	// set field15.  if it's a broadcast command things are easy
	int field15 = 0;
	if ((command == L1A) | (command == SoftRst) | (command == BXRst)){
		field15 = command << 24;
	} else if (command == Reg) {
		int cmdlength = 0;
		if (isRead){
			cmdlength = 0b00001100;
			comms[5] = 0;
		} else {
			switch (registers) {
				case Config:
					cmdlength = 0b00100100;
					comms[5] = payload << 8;
					break;
				case Status:
					cmdlength = 0b00001100;
					comms[5] = payload;
					break;
				case Thresh1:
					cmdlength = 0b00011100;
					comms[5] = payload << 16;
					break;
				case Thresh2:
					cmdlength = 0b00011100;
					comms[5] = payload << 16;
					break;
				default:
					cmdlength = 0;
					comms[5] = 0;
					printf("Unrecognized register %u requested! Ignoring\n", registers);
					return 2;
			}
		}

		field15 = (command << 24) + (cmdlength << 16) + (chipId << 10) + ((isRead ? 1 : 0) << 9) + (registers << 4);
	} else {
		printf("Unrecognized command %u requested! Ignoring\n", command);
		return 3;
	}

	// send the command by toggling the trigger bit
	comms[0] = (0 << 31) + field15;
	comms[0] = (1 << 31) + field15;

	int delay = 0;
	while (1){
		if (isRead){
			if ((CHECK_BIT(comms[6],1)) && (CHECK_BIT(comms[6],0))){
				break;
			}

		} else {
			if (CHECK_BIT(comms[6],1)){
				break;
			}
		}


		if (delay > 10000){
			printf("ERROR: moving on, timed out trying to %s command %X\n", isRead ? "receive data from" : "send", field15);
			return 4;
		}
		delay++;
	}
	return 0;
}
static inline unsigned int get_cyclecount (void)
{
  unsigned int value;
  // Read CCNT Register
  asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
  return value;
}

static inline void init_perfcounters (int32_t do_reset, int32_t enable_divider)
{
  // in general enable all counters (including cycle counter)
  int32_t value = 1;

  // peform reset:
  if (do_reset)
  {
    value |= 2;     // reset all counters to zero.
    value |= 4;     // reset cycle counter to zero.
  }

  if (enable_divider)
    value |= 8;     // enable "by 64" divider for CCNT.

  value |= 16;

  // program the performance-counter control-register:
  asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

  // enable all counters:
  asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

  // clear overflows:
  asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}

int main()
{
	cccd(Reg,WR,Config,CHIPID_ALL,3);

//	tdc[0] = 0;
//
	tdc[0] = 0b10000000000000000000000000000000;
	int i = 0;
	while (i < 1000000) {
		i++;
	}
	tdc[0] = 0;

	int data[1325];

//	// init counters:
//	init_perfcounters (1, 0);
//
//	// measure the counting overhead:
//	unsigned int overhead = get_cyclecount();
//	overhead = get_cyclecount() - overhead;
//
//	unsigned int t = get_cyclecount();
//
//	// do some stuff here..
//	for (int j = 0; j < 1325; j++){
//		data[j] = dips[0];
//		//printf("data[%u,%u]  %08X  %u\n",2*j,2*j+1,dips[0],CHECK_BIT(dips[1],0));
//	}
//	t = get_cyclecount() - t;
//
//	printf ("function took exactly %d cycles\n ", t - overhead);

	for (int j = 0; j < 1324; j++){
		printf("data[%u,%u]  %08X  %u\n",2*j,2*j+1,dips[0],dips[2]);
	}


//	tdc[0] = 0;
//	printf("Initialized to:\n");
//	printf("ISR: %08X\n",fifo[0]);
//	printf("RDFO: %08X\n",fifo[7]);
//
//	fifo[0] = 0b11111111111111111111111111111111;
//	printf("Cleared interrupts\n");
//	printf("ISR: %08X\n",fifo[0]);
//
//	tdc[0] = 0b10000000000000000000000000000000;
//	int i = 0;
//	while (i < 1000000) {
//		i++;
//	}
//	tdc[0] = 0b00000000000000000000000000000000;
//	printf("Data collected\n");
//	printf("ISR: %08X\n",fifo[0]);
//	printf("RDFO: %u\n",fifo[7]);
//	printf("RLR: %u\n",fifo[9]);
//
//	for (int j = 0; j < 664; j++){
//		printf("data[%u,%u]  %08X\n",2*j,2*j+1,fifodata[1024]);
//	}
//

//	cccd(WR,Reg,Thresh1,1,0b0001111100011111);
//	printb(&comms[0]);
//	printb(&comms[5]);
//	cccd(RD,Reg,Thresh1,0,0);
//	printb(&comms[0]);
//	printb(&comms[6]);
//	printb(&comms[10]);

//	cccd(WR,Reg,Config,CHIPID_ALL,3);
//	printf("sendid set");
//
//	ghjk();


}

void ghjk(){

	 tdc[0] = 0b00000000000000000000000000000000;


	 tdc[1] = 0xffffffff;
	 tdc[2] = 0xffffffff;
	 printf("%s","resetting...");

	 tdc[1] = 0x00000000;
	 tdc[2] = 0x00000000;

	 printb(&tdc[3]);
	 printb(&tdc[4]);

	 tdc[0] = 0b10000000000000000000000000000000;
	 int i = 0;
	 while (i < 10000000) {
		 i++;
	 }
	 tdc[0] = 0b00000000000000000000000000000000;
	 printb(&tdc[3]);
	 printb(&tdc[4]);
	 print("done\n");

	 int gaaaaaabage = 0;
	 for (int i = 0; i < 10; i = i + 2){
		 gaaaaaabage = bram[i/2]; // DO NOT ERASE
		 printf("this is [%d,%d] %08X ", i+1, i, bram[i/2]);
		 printb(&bram[i/2]);
	 }
}




//assumes little endian
void printb(const * ptr)
{
	size_t const size = sizeof(ptr);
    unsigned char *b = (unsigned char*) ptr;
    unsigned char byte;
    int i, j;

    for (i=size-1;i>=0;i--)
    {
        for (j=7;j>=0;j--)
        {
            byte = (b[i] >> j) & 1;
            printf("%u", byte);
        }
    }
    puts("");
}
