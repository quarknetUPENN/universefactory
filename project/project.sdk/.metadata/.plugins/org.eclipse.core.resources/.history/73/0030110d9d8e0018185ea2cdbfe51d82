/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include <string.h>
#include <stdbool.h>

#define BIT(var,pos) ((var) & (1<<(pos)))

volatile unsigned int *comms = (volatile unsigned int *) 0x43c00000;
volatile unsigned int *tdc = (volatile unsigned int *) 0x43c10000;
volatile unsigned int *bram = (volatile unsigned int *) 0x80000000;
typedef enum cmd {
    L1A 		= 0b1100000,
	SoftRst 	= 0b1010100,
	BXRst 		= 0b1010010,
	WrReg 		= 0b1010111,
	RdReg 		= 0b1010111
} command;

typedef enum reg {
	Config = 0b00000, Status = 0b00011, Thresh1 = 0b01010, Thresh2 = 0b01100
} registers;

void cccd(enum cmd command, enum reg registers, bool isRead, int chipId, int payload){
	int cmdlength = 0;
	switch (registers) {
		case Config:
			cmdlength = 0b00100100;
			comms[5] = payload << 8;
			break;
		case Status:
			cmdlength = 0b00001100;
			comms[5] = payload;
			break;
		case Thresh1:
			cmdlength = 0b00011100;
			comms[5] = payload << 16;
			break;
		case Thresh2:
			cmdlength = 0b00011100;
			comms[5] = payload << 16;
			break;
		default:
			cmdlength = 0;
			comms[5] = 0;
			break;
	}


	int field15 = (command << 24) + (cmdlength << 16) + (chipId << 10) + ((isRead ? 1 : 0) << 9) + (registers << 4);
	comms[0] = (0 << 31) + field15 + 1;
	comms[0] = (1 << 31) + field15 + 1;

	printb(&comms[0]);
	printb(&comms[5]);
}


int main()
{
	comms[0] = 1;
	cccd(WrReg,Thresh1,false,0b111111,0b0000111100001111);
	cccd(RdReg,Thresh1,true,0,0);
	printb(&comms[0]);
	printb(&comms[6]);

	//cccd(WrReg, Config, false, 1, 3);
	//ghjk();
	//printf("%u",tdc[6]);

//	 tdc[0] = 0b00000000000000000000000000000000;
//
//	 printb(&tdc[0]);
//	 printb(&tdc[1]);
//	 printb(&tdc[2]);
//	 tdc[1] = 0xffffffff;
//	 tdc[2] = 0xffffffff;
//	 printf("%s","resetting...");
//	 printb(&tdc[1]);
//	 printb(&tdc[2]);
//
//	 tdc[1] = 0x00000000;
//	 tdc[2] = 0x00000000;
//
//	 printb(&tdc[3]);
//	 printb(&tdc[4]);

}

void ghjk(){

	 tdc[0] = 0b00000000000000000000000000000000;


	 tdc[1] = 0xffffffff;
	 tdc[2] = 0xffffffff;
	 printf("%s","resetting...");

	 tdc[1] = 0x00000000;
	 tdc[2] = 0x00000000;

	 printb(&tdc[3]);
	 printb(&tdc[4]);

	 tdc[0] = 0b10000000000000000000000000000000;
	 int i = 0;
	 while (i < 10000000) {
		 i++;
	 }
	 tdc[0] = 0b00000000000000000000000000000000;
	 printb(&tdc[3]);
	 printb(&tdc[4]);
	 print("done\n");

	 int gaaaaaabage = 0;
	 for (int i = 0; i < 10000; i = i + 2){
		 gaaaaaabage = bram[i/2]; // DO NOT ERASE
		 printf("this is [%d,%d] %08X ", i+1, i, bram[i/2]);
		 printb(&bram[i/2]);
	 }
}
void asdf(){
	 printf("hello world");
	 tdc[0] = 0;

//              0bT111222233333333AAAAAA555555XXXX;

	 comms[5] = 0b00001111000011110000000000000000;

	 comms[0] = 0b01010111000111000001100010100000;
	 comms[0] = 0b11010111000111000001100010100000;
	 print("\n blah");

	 comms[5] = 0;
	 comms[0] = 0b01010111000011000001101010100000;
	 comms[0] = 0b11010111000011000001101010100000;


//              0bT111222233333333AAAAAA555555XXXX;
//	 comms[5] = 0b00001111000011110000111100001111;
//	 comms[0] = 0b01010111000111000000000010100000;     //Write Thresh Reg
// 	 comms[0] = 0b11010111000111000000000010100000;
// 	 printb(&comms[10]);

//	 comms[5] = 0;
////	 comms[0] = 0b01010100000000000000000000000000;     //Soft Reset
////	 comms[0] = 0b11010100000000000000000000000000;
////	 print("\n some text");
//	 comms[0] = 0b01010111000011000000101000110000;     //Read Common Status Reg
//	 comms[0] = 0b11010111000011000000101000110000;

//	 comms[0] = 0b01010111000111000000101100010000;     //Read temperature-voltage reg
//	 comms[0] = 0b11010111000111000000101100010000;

//	 comms[0] = 0b01010111001001000000011000000000;		//Read config reg
//	 comms[0] = 0b11010111001001000000011000000000;

//	 comms[0] = 0b01010111001001001111110000000000;		//Write config reg
//	 comms[0] = 0b11010111001001001111110000000000;
////
//	 comms[0] = 0b01010111000111000000001010100000;     //Read Thresh Reg
// 	 comms[0] = 0b11010111000111000000001010100000;
	 printb(&comms[6]);
	 puts("");
 	 printb(&comms[10]);

}


//assumes little endian
void printb(const * ptr)
{
	size_t const size = sizeof(ptr);
    unsigned char *b = (unsigned char*) ptr;
    unsigned char byte;
    int i, j;

    for (i=size-1;i>=0;i--)
    {
        for (j=7;j>=0;j--)
        {
            byte = (b[i] >> j) & 1;
            printf("%u", byte);
        }
    }
    puts("");
}
